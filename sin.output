Nonterminals useless in grammar

    sec_num
    sec_array
    matrix
    function


Terminals unused in grammar

    COM
    BCOM
    RETURN
    ARITOP
    FUN
    RELOP
    GROUP
    ARRAY
    BINOP
    FUNCTION
    END


Rules useless in grammar

   59 stat: matrix

   60 sec_num: DOUBLE COMMAN sec_num

   61 array: LR sec_num RR

   62 sec_array: array COMMAN sec_array

   63 matrix: LR sec_array RR

   64 declare: ID LR DOUBLE RR LR DOUBLE RR ASIG matrix

   65 function: FUN ID LG id_sec RG LF stat RETURN ID RF
   66         | FUN ID LG id_sec RG LF stat RETURN DOUBLE RF
   67         | FUN ID LG id_sec RG LF stat RF


State 0 conflicts: 1 reduce/reduce
State 2 conflicts: 4 shift/reduce
State 13 conflicts: 2 shift/reduce
State 68 conflicts: 2 shift/reduce
State 111 conflicts: 2 shift/reduce
State 128 conflicts: 2 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: stmts
    2     | %empty

    3 stmts: %empty
    4      | stat stmts

    5 expr: expr ADD expr
    6     | expr SUB expr
    7     | expr MUL expr
    8     | expr DIV expr
    9     | expr POT expr
   10     | LG expr RG
   11     | SUB expr
   12     | DOUBLE

   13 stat: if_stat
   14     | for_stat
   15     | while_stat
   16     | print_stat
   17     | condition
   18     | declare
   19     | asig
   20     | cont
   21     | array
   22     | call_function
   23     | expr

   24 for_stat: FOR LG asig SEMICOLON condition SEMICOLON cont RG LF stat RF

   25 while_stat: WHILE LG condition RG LF stat RF

   26 print_stat: PRINT LG ID RG
   27           | PRINT LG expr RG

   28 condition: bool_cond AB AB condition
   29          | bool_cond OB OB condition
   30          | num_cond AB AB condition
   31          | num_cond OB OB condition
   32          | num_cond
   33          | bool_cond

   34 bool_cond: ID
   35          | ID neq_eq TRUE
   36          | ID neq_eq FALSE

   37 neq_eq: EQ
   38       | NE

   39 num_cond: ID oper DOUBLE

   40 oper: neq_eq
   41     | LT
   42     | LE
   43     | GE
   44     | GT

   45 cont: ADD ADD ID
   46     | SUB SUB ID
   47     | ID ADD ADD
   48     | ID SUB SUB

   49 array: LR RR

   50 declare: ID LR DOUBLE RR ASIG array
   51        | ID ASIG expr

   52 asig: ID LR DOUBLE RR LR DOUBLE RR ASIG expr
   53     | ID LR DOUBLE RR ASIG expr

   54 id_sec: ID COMMAN id_sec
   55       | %empty

   56 call_function: ID LG id_sec RG

   57 if_stat: IF LG condition RG LF stat RF ELSE LF stat RF
   58        | IF LG condition RG LF stat RF


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IF (258) 57 58
    ELSE (259) 57
    ID <name> (260) 26 34 35 36 39 45 46 47 48 50 51 52 53 54 56
    DOUBLE <real> (261) 12 39 50 52 53
    FOR (262) 24
    WHILE (263) 25
    COM (264)
    BCOM (265)
    LT (266) 41
    LE (267) 42
    EQ (268) 37
    NE (269) 38
    GT (270) 44
    GE (271) 43
    PRINT (272) 26 27
    LG (273) 10 24 25 26 27 56 57 58
    RG (274) 10 24 25 26 27 56 57 58
    LR (275) 49 50 52 53
    RR (276) 49 50 52 53
    AB (277) 28 30
    OB (278) 29 31
    ADD (279) 5 45 47
    SUB (280) 6 11 46 48
    MUL (281) 7
    DIV (282) 8
    POT (283) 9
    FALSE (284) 36
    TRUE (285) 35
    LF (286) 24 25 57 58
    RF (287) 24 25 57 58
    ASIG (288) 50 51 52 53
    RETURN (289)
    ARITOP (290)
    FUN (291)
    RELOP (292)
    GROUP (293)
    ARRAY (294)
    BINOP (295)
    FUNCTION (296)
    SEMICOLON (297) 24
    COMMAN (298) 54
    END (299)
    UMINUS (300)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    prog (47)
        on left: 1 2
        on right: 0
    stmts (48)
        on left: 3 4
        on right: 1 4
    expr <real> (49)
        on left: 5 6 7 8 9 10 11 12
        on right: 5 6 7 8 9 10 11 23 27 51 52 53
    stat (50)
        on left: 13 14 15 16 17 18 19 20 21 22 23
        on right: 4 24 25 57 58
    for_stat (51)
        on left: 24
        on right: 14
    while_stat (52)
        on left: 25
        on right: 15
    print_stat (53)
        on left: 26 27
        on right: 16
    condition (54)
        on left: 28 29 30 31 32 33
        on right: 17 24 25 28 29 30 31 57 58
    bool_cond (55)
        on left: 34 35 36
        on right: 28 29 33
    neq_eq (56)
        on left: 37 38
        on right: 35 36 40
    num_cond (57)
        on left: 39
        on right: 30 31 32
    oper (58)
        on left: 40 41 42 43 44
        on right: 39
    cont (59)
        on left: 45 46 47 48
        on right: 20 24
    array (60)
        on left: 49
        on right: 21 50
    declare (61)
        on left: 50 51
        on right: 18
    asig (62)
        on left: 52 53
        on right: 19 24
    id_sec (63)
        on left: 54 55
        on right: 54 56
    call_function (64)
        on left: 56
        on right: 22
    if_stat (65)
        on left: 57 58
        on right: 13


State 0

    0 $accept: . prog $end

    IF      shift, and go to state 1
    ID      shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FOR     shift, and go to state 4
    WHILE   shift, and go to state 5
    PRINT   shift, and go to state 6
    LG      shift, and go to state 7
    LR      shift, and go to state 8
    ADD     shift, and go to state 9
    SUB     shift, and go to state 10

    $end      reduce using rule 2 (prog)
    $end      [reduce using rule 3 (stmts)]
    $default  reduce using rule 2 (prog)

    prog           go to state 11
    stmts          go to state 12
    expr           go to state 13
    stat           go to state 14
    for_stat       go to state 15
    while_stat     go to state 16
    print_stat     go to state 17
    condition      go to state 18
    bool_cond      go to state 19
    num_cond       go to state 20
    cont           go to state 21
    array          go to state 22
    declare        go to state 23
    asig           go to state 24
    call_function  go to state 25
    if_stat        go to state 26


State 1

   57 if_stat: IF . LG condition RG LF stat RF ELSE LF stat RF
   58        | IF . LG condition RG LF stat RF

    LG  shift, and go to state 27


State 2

   34 bool_cond: ID .
   35          | ID . neq_eq TRUE
   36          | ID . neq_eq FALSE
   39 num_cond: ID . oper DOUBLE
   47 cont: ID . ADD ADD
   48     | ID . SUB SUB
   50 declare: ID . LR DOUBLE RR ASIG array
   51        | ID . ASIG expr
   52 asig: ID . LR DOUBLE RR LR DOUBLE RR ASIG expr
   53     | ID . LR DOUBLE RR ASIG expr
   56 call_function: ID . LG id_sec RG

    LT    shift, and go to state 28
    LE    shift, and go to state 29
    EQ    shift, and go to state 30
    NE    shift, and go to state 31
    GT    shift, and go to state 32
    GE    shift, and go to state 33
    LG    shift, and go to state 34
    LR    shift, and go to state 35
    ADD   shift, and go to state 36
    SUB   shift, and go to state 37
    ASIG  shift, and go to state 38

    LG        [reduce using rule 34 (bool_cond)]
    LR        [reduce using rule 34 (bool_cond)]
    ADD       [reduce using rule 34 (bool_cond)]
    SUB       [reduce using rule 34 (bool_cond)]
    $default  reduce using rule 34 (bool_cond)

    neq_eq  go to state 39
    oper    go to state 40


State 3

   12 expr: DOUBLE .

    $default  reduce using rule 12 (expr)


State 4

   24 for_stat: FOR . LG asig SEMICOLON condition SEMICOLON cont RG LF stat RF

    LG  shift, and go to state 41


State 5

   25 while_stat: WHILE . LG condition RG LF stat RF

    LG  shift, and go to state 42


State 6

   26 print_stat: PRINT . LG ID RG
   27           | PRINT . LG expr RG

    LG  shift, and go to state 43


State 7

   10 expr: LG . expr RG

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 45


State 8

   49 array: LR . RR

    RR  shift, and go to state 46


State 9

   45 cont: ADD . ADD ID

    ADD  shift, and go to state 47


State 10

   11 expr: SUB . expr
   46 cont: SUB . SUB ID

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 48

    expr  go to state 49


State 11

    0 $accept: prog . $end

    $end  shift, and go to state 50


State 12

    1 prog: stmts .

    $default  reduce using rule 1 (prog)


State 13

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    7     | expr . MUL expr
    8     | expr . DIV expr
    9     | expr . POT expr
   23 stat: expr .

    ADD  shift, and go to state 51
    SUB  shift, and go to state 52
    MUL  shift, and go to state 53
    DIV  shift, and go to state 54
    POT  shift, and go to state 55

    ADD       [reduce using rule 23 (stat)]
    SUB       [reduce using rule 23 (stat)]
    $default  reduce using rule 23 (stat)


State 14

    4 stmts: stat . stmts

    IF      shift, and go to state 1
    ID      shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FOR     shift, and go to state 4
    WHILE   shift, and go to state 5
    PRINT   shift, and go to state 6
    LG      shift, and go to state 7
    LR      shift, and go to state 8
    ADD     shift, and go to state 9
    SUB     shift, and go to state 10

    $default  reduce using rule 3 (stmts)

    stmts          go to state 56
    expr           go to state 13
    stat           go to state 14
    for_stat       go to state 15
    while_stat     go to state 16
    print_stat     go to state 17
    condition      go to state 18
    bool_cond      go to state 19
    num_cond       go to state 20
    cont           go to state 21
    array          go to state 22
    declare        go to state 23
    asig           go to state 24
    call_function  go to state 25
    if_stat        go to state 26


State 15

   14 stat: for_stat .

    $default  reduce using rule 14 (stat)


State 16

   15 stat: while_stat .

    $default  reduce using rule 15 (stat)


State 17

   16 stat: print_stat .

    $default  reduce using rule 16 (stat)


State 18

   17 stat: condition .

    $default  reduce using rule 17 (stat)


State 19

   28 condition: bool_cond . AB AB condition
   29          | bool_cond . OB OB condition
   33          | bool_cond .

    AB  shift, and go to state 57
    OB  shift, and go to state 58

    $default  reduce using rule 33 (condition)


State 20

   30 condition: num_cond . AB AB condition
   31          | num_cond . OB OB condition
   32          | num_cond .

    AB  shift, and go to state 59
    OB  shift, and go to state 60

    $default  reduce using rule 32 (condition)


State 21

   20 stat: cont .

    $default  reduce using rule 20 (stat)


State 22

   21 stat: array .

    $default  reduce using rule 21 (stat)


State 23

   18 stat: declare .

    $default  reduce using rule 18 (stat)


State 24

   19 stat: asig .

    $default  reduce using rule 19 (stat)


State 25

   22 stat: call_function .

    $default  reduce using rule 22 (stat)


State 26

   13 stat: if_stat .

    $default  reduce using rule 13 (stat)


State 27

   57 if_stat: IF LG . condition RG LF stat RF ELSE LF stat RF
   58        | IF LG . condition RG LF stat RF

    ID  shift, and go to state 61

    condition  go to state 62
    bool_cond  go to state 19
    num_cond   go to state 20


State 28

   41 oper: LT .

    $default  reduce using rule 41 (oper)


State 29

   42 oper: LE .

    $default  reduce using rule 42 (oper)


State 30

   37 neq_eq: EQ .

    $default  reduce using rule 37 (neq_eq)


State 31

   38 neq_eq: NE .

    $default  reduce using rule 38 (neq_eq)


State 32

   44 oper: GT .

    $default  reduce using rule 44 (oper)


State 33

   43 oper: GE .

    $default  reduce using rule 43 (oper)


State 34

   56 call_function: ID LG . id_sec RG

    ID  shift, and go to state 63

    $default  reduce using rule 55 (id_sec)

    id_sec  go to state 64


State 35

   50 declare: ID LR . DOUBLE RR ASIG array
   52 asig: ID LR . DOUBLE RR LR DOUBLE RR ASIG expr
   53     | ID LR . DOUBLE RR ASIG expr

    DOUBLE  shift, and go to state 65


State 36

   47 cont: ID ADD . ADD

    ADD  shift, and go to state 66


State 37

   48 cont: ID SUB . SUB

    SUB  shift, and go to state 67


State 38

   51 declare: ID ASIG . expr

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 68


State 39

   35 bool_cond: ID neq_eq . TRUE
   36          | ID neq_eq . FALSE
   40 oper: neq_eq .

    FALSE  shift, and go to state 69
    TRUE   shift, and go to state 70

    $default  reduce using rule 40 (oper)


State 40

   39 num_cond: ID oper . DOUBLE

    DOUBLE  shift, and go to state 71


State 41

   24 for_stat: FOR LG . asig SEMICOLON condition SEMICOLON cont RG LF stat RF

    ID  shift, and go to state 72

    asig  go to state 73


State 42

   25 while_stat: WHILE LG . condition RG LF stat RF

    ID  shift, and go to state 61

    condition  go to state 74
    bool_cond  go to state 19
    num_cond   go to state 20


State 43

   26 print_stat: PRINT LG . ID RG
   27           | PRINT LG . expr RG

    ID      shift, and go to state 75
    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 76


State 44

   11 expr: SUB . expr

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 49


State 45

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    7     | expr . MUL expr
    8     | expr . DIV expr
    9     | expr . POT expr
   10     | LG expr . RG

    RG   shift, and go to state 77
    ADD  shift, and go to state 51
    SUB  shift, and go to state 52
    MUL  shift, and go to state 53
    DIV  shift, and go to state 54
    POT  shift, and go to state 55


State 46

   49 array: LR RR .

    $default  reduce using rule 49 (array)


State 47

   45 cont: ADD ADD . ID

    ID  shift, and go to state 78


State 48

   11 expr: SUB . expr
   46 cont: SUB SUB . ID

    ID      shift, and go to state 79
    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 49


State 49

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    7     | expr . MUL expr
    8     | expr . DIV expr
    9     | expr . POT expr
   11     | SUB expr .

    $default  reduce using rule 11 (expr)


State 50

    0 $accept: prog $end .

    $default  accept


State 51

    5 expr: expr ADD . expr

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 80


State 52

    6 expr: expr SUB . expr

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 81


State 53

    7 expr: expr MUL . expr

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 82


State 54

    8 expr: expr DIV . expr

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 83


State 55

    9 expr: expr POT . expr

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 84


State 56

    4 stmts: stat stmts .

    $default  reduce using rule 4 (stmts)


State 57

   28 condition: bool_cond AB . AB condition

    AB  shift, and go to state 85


State 58

   29 condition: bool_cond OB . OB condition

    OB  shift, and go to state 86


State 59

   30 condition: num_cond AB . AB condition

    AB  shift, and go to state 87


State 60

   31 condition: num_cond OB . OB condition

    OB  shift, and go to state 88


State 61

   34 bool_cond: ID .
   35          | ID . neq_eq TRUE
   36          | ID . neq_eq FALSE
   39 num_cond: ID . oper DOUBLE

    LT  shift, and go to state 28
    LE  shift, and go to state 29
    EQ  shift, and go to state 30
    NE  shift, and go to state 31
    GT  shift, and go to state 32
    GE  shift, and go to state 33

    $default  reduce using rule 34 (bool_cond)

    neq_eq  go to state 39
    oper    go to state 40


State 62

   57 if_stat: IF LG condition . RG LF stat RF ELSE LF stat RF
   58        | IF LG condition . RG LF stat RF

    RG  shift, and go to state 89


State 63

   54 id_sec: ID . COMMAN id_sec

    COMMAN  shift, and go to state 90


State 64

   56 call_function: ID LG id_sec . RG

    RG  shift, and go to state 91


State 65

   50 declare: ID LR DOUBLE . RR ASIG array
   52 asig: ID LR DOUBLE . RR LR DOUBLE RR ASIG expr
   53     | ID LR DOUBLE . RR ASIG expr

    RR  shift, and go to state 92


State 66

   47 cont: ID ADD ADD .

    $default  reduce using rule 47 (cont)


State 67

   48 cont: ID SUB SUB .

    $default  reduce using rule 48 (cont)


State 68

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    7     | expr . MUL expr
    8     | expr . DIV expr
    9     | expr . POT expr
   51 declare: ID ASIG expr .

    ADD  shift, and go to state 51
    SUB  shift, and go to state 52
    MUL  shift, and go to state 53
    DIV  shift, and go to state 54
    POT  shift, and go to state 55

    ADD       [reduce using rule 51 (declare)]
    SUB       [reduce using rule 51 (declare)]
    $default  reduce using rule 51 (declare)


State 69

   36 bool_cond: ID neq_eq FALSE .

    $default  reduce using rule 36 (bool_cond)


State 70

   35 bool_cond: ID neq_eq TRUE .

    $default  reduce using rule 35 (bool_cond)


State 71

   39 num_cond: ID oper DOUBLE .

    $default  reduce using rule 39 (num_cond)


State 72

   52 asig: ID . LR DOUBLE RR LR DOUBLE RR ASIG expr
   53     | ID . LR DOUBLE RR ASIG expr

    LR  shift, and go to state 93


State 73

   24 for_stat: FOR LG asig . SEMICOLON condition SEMICOLON cont RG LF stat RF

    SEMICOLON  shift, and go to state 94


State 74

   25 while_stat: WHILE LG condition . RG LF stat RF

    RG  shift, and go to state 95


State 75

   26 print_stat: PRINT LG ID . RG

    RG  shift, and go to state 96


State 76

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    7     | expr . MUL expr
    8     | expr . DIV expr
    9     | expr . POT expr
   27 print_stat: PRINT LG expr . RG

    RG   shift, and go to state 97
    ADD  shift, and go to state 51
    SUB  shift, and go to state 52
    MUL  shift, and go to state 53
    DIV  shift, and go to state 54
    POT  shift, and go to state 55


State 77

   10 expr: LG expr RG .

    $default  reduce using rule 10 (expr)


State 78

   45 cont: ADD ADD ID .

    $default  reduce using rule 45 (cont)


State 79

   46 cont: SUB SUB ID .

    $default  reduce using rule 46 (cont)


State 80

    5 expr: expr . ADD expr
    5     | expr ADD expr .
    6     | expr . SUB expr
    7     | expr . MUL expr
    8     | expr . DIV expr
    9     | expr . POT expr

    MUL  shift, and go to state 53
    DIV  shift, and go to state 54
    POT  shift, and go to state 55

    $default  reduce using rule 5 (expr)


State 81

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    6     | expr SUB expr .
    7     | expr . MUL expr
    8     | expr . DIV expr
    9     | expr . POT expr

    MUL  shift, and go to state 53
    DIV  shift, and go to state 54
    POT  shift, and go to state 55

    $default  reduce using rule 6 (expr)


State 82

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    7     | expr . MUL expr
    7     | expr MUL expr .
    8     | expr . DIV expr
    9     | expr . POT expr

    POT  shift, and go to state 55

    $default  reduce using rule 7 (expr)


State 83

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    7     | expr . MUL expr
    8     | expr . DIV expr
    8     | expr DIV expr .
    9     | expr . POT expr

    POT  shift, and go to state 55

    $default  reduce using rule 8 (expr)


State 84

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    7     | expr . MUL expr
    8     | expr . DIV expr
    9     | expr . POT expr
    9     | expr POT expr .

    POT  shift, and go to state 55

    $default  reduce using rule 9 (expr)


State 85

   28 condition: bool_cond AB AB . condition

    ID  shift, and go to state 61

    condition  go to state 98
    bool_cond  go to state 19
    num_cond   go to state 20


State 86

   29 condition: bool_cond OB OB . condition

    ID  shift, and go to state 61

    condition  go to state 99
    bool_cond  go to state 19
    num_cond   go to state 20


State 87

   30 condition: num_cond AB AB . condition

    ID  shift, and go to state 61

    condition  go to state 100
    bool_cond  go to state 19
    num_cond   go to state 20


State 88

   31 condition: num_cond OB OB . condition

    ID  shift, and go to state 61

    condition  go to state 101
    bool_cond  go to state 19
    num_cond   go to state 20


State 89

   57 if_stat: IF LG condition RG . LF stat RF ELSE LF stat RF
   58        | IF LG condition RG . LF stat RF

    LF  shift, and go to state 102


State 90

   54 id_sec: ID COMMAN . id_sec

    ID  shift, and go to state 63

    $default  reduce using rule 55 (id_sec)

    id_sec  go to state 103


State 91

   56 call_function: ID LG id_sec RG .

    $default  reduce using rule 56 (call_function)


State 92

   50 declare: ID LR DOUBLE RR . ASIG array
   52 asig: ID LR DOUBLE RR . LR DOUBLE RR ASIG expr
   53     | ID LR DOUBLE RR . ASIG expr

    LR    shift, and go to state 104
    ASIG  shift, and go to state 105


State 93

   52 asig: ID LR . DOUBLE RR LR DOUBLE RR ASIG expr
   53     | ID LR . DOUBLE RR ASIG expr

    DOUBLE  shift, and go to state 106


State 94

   24 for_stat: FOR LG asig SEMICOLON . condition SEMICOLON cont RG LF stat RF

    ID  shift, and go to state 61

    condition  go to state 107
    bool_cond  go to state 19
    num_cond   go to state 20


State 95

   25 while_stat: WHILE LG condition RG . LF stat RF

    LF  shift, and go to state 108


State 96

   26 print_stat: PRINT LG ID RG .

    $default  reduce using rule 26 (print_stat)


State 97

   27 print_stat: PRINT LG expr RG .

    $default  reduce using rule 27 (print_stat)


State 98

   28 condition: bool_cond AB AB condition .

    $default  reduce using rule 28 (condition)


State 99

   29 condition: bool_cond OB OB condition .

    $default  reduce using rule 29 (condition)


State 100

   30 condition: num_cond AB AB condition .

    $default  reduce using rule 30 (condition)


State 101

   31 condition: num_cond OB OB condition .

    $default  reduce using rule 31 (condition)


State 102

   57 if_stat: IF LG condition RG LF . stat RF ELSE LF stat RF
   58        | IF LG condition RG LF . stat RF

    IF      shift, and go to state 1
    ID      shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FOR     shift, and go to state 4
    WHILE   shift, and go to state 5
    PRINT   shift, and go to state 6
    LG      shift, and go to state 7
    LR      shift, and go to state 8
    ADD     shift, and go to state 9
    SUB     shift, and go to state 10

    expr           go to state 13
    stat           go to state 109
    for_stat       go to state 15
    while_stat     go to state 16
    print_stat     go to state 17
    condition      go to state 18
    bool_cond      go to state 19
    num_cond       go to state 20
    cont           go to state 21
    array          go to state 22
    declare        go to state 23
    asig           go to state 24
    call_function  go to state 25
    if_stat        go to state 26


State 103

   54 id_sec: ID COMMAN id_sec .

    $default  reduce using rule 54 (id_sec)


State 104

   52 asig: ID LR DOUBLE RR LR . DOUBLE RR ASIG expr

    DOUBLE  shift, and go to state 110


State 105

   50 declare: ID LR DOUBLE RR ASIG . array
   53 asig: ID LR DOUBLE RR ASIG . expr

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    LR      shift, and go to state 8
    SUB     shift, and go to state 44

    expr   go to state 111
    array  go to state 112


State 106

   52 asig: ID LR DOUBLE . RR LR DOUBLE RR ASIG expr
   53     | ID LR DOUBLE . RR ASIG expr

    RR  shift, and go to state 113


State 107

   24 for_stat: FOR LG asig SEMICOLON condition . SEMICOLON cont RG LF stat RF

    SEMICOLON  shift, and go to state 114


State 108

   25 while_stat: WHILE LG condition RG LF . stat RF

    IF      shift, and go to state 1
    ID      shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FOR     shift, and go to state 4
    WHILE   shift, and go to state 5
    PRINT   shift, and go to state 6
    LG      shift, and go to state 7
    LR      shift, and go to state 8
    ADD     shift, and go to state 9
    SUB     shift, and go to state 10

    expr           go to state 13
    stat           go to state 115
    for_stat       go to state 15
    while_stat     go to state 16
    print_stat     go to state 17
    condition      go to state 18
    bool_cond      go to state 19
    num_cond       go to state 20
    cont           go to state 21
    array          go to state 22
    declare        go to state 23
    asig           go to state 24
    call_function  go to state 25
    if_stat        go to state 26


State 109

   57 if_stat: IF LG condition RG LF stat . RF ELSE LF stat RF
   58        | IF LG condition RG LF stat . RF

    RF  shift, and go to state 116


State 110

   52 asig: ID LR DOUBLE RR LR DOUBLE . RR ASIG expr

    RR  shift, and go to state 117


State 111

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    7     | expr . MUL expr
    8     | expr . DIV expr
    9     | expr . POT expr
   53 asig: ID LR DOUBLE RR ASIG expr .

    ADD  shift, and go to state 51
    SUB  shift, and go to state 52
    MUL  shift, and go to state 53
    DIV  shift, and go to state 54
    POT  shift, and go to state 55

    ADD       [reduce using rule 53 (asig)]
    SUB       [reduce using rule 53 (asig)]
    $default  reduce using rule 53 (asig)


State 112

   50 declare: ID LR DOUBLE RR ASIG array .

    $default  reduce using rule 50 (declare)


State 113

   52 asig: ID LR DOUBLE RR . LR DOUBLE RR ASIG expr
   53     | ID LR DOUBLE RR . ASIG expr

    LR    shift, and go to state 104
    ASIG  shift, and go to state 118


State 114

   24 for_stat: FOR LG asig SEMICOLON condition SEMICOLON . cont RG LF stat RF

    ID   shift, and go to state 119
    ADD  shift, and go to state 9
    SUB  shift, and go to state 120

    cont  go to state 121


State 115

   25 while_stat: WHILE LG condition RG LF stat . RF

    RF  shift, and go to state 122


State 116

   57 if_stat: IF LG condition RG LF stat RF . ELSE LF stat RF
   58        | IF LG condition RG LF stat RF .

    ELSE  shift, and go to state 123

    $default  reduce using rule 58 (if_stat)


State 117

   52 asig: ID LR DOUBLE RR LR DOUBLE RR . ASIG expr

    ASIG  shift, and go to state 124


State 118

   53 asig: ID LR DOUBLE RR ASIG . expr

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 111


State 119

   47 cont: ID . ADD ADD
   48     | ID . SUB SUB

    ADD  shift, and go to state 36
    SUB  shift, and go to state 37


State 120

   46 cont: SUB . SUB ID

    SUB  shift, and go to state 125


State 121

   24 for_stat: FOR LG asig SEMICOLON condition SEMICOLON cont . RG LF stat RF

    RG  shift, and go to state 126


State 122

   25 while_stat: WHILE LG condition RG LF stat RF .

    $default  reduce using rule 25 (while_stat)


State 123

   57 if_stat: IF LG condition RG LF stat RF ELSE . LF stat RF

    LF  shift, and go to state 127


State 124

   52 asig: ID LR DOUBLE RR LR DOUBLE RR ASIG . expr

    DOUBLE  shift, and go to state 3
    LG      shift, and go to state 7
    SUB     shift, and go to state 44

    expr  go to state 128


State 125

   46 cont: SUB SUB . ID

    ID  shift, and go to state 79


State 126

   24 for_stat: FOR LG asig SEMICOLON condition SEMICOLON cont RG . LF stat RF

    LF  shift, and go to state 129


State 127

   57 if_stat: IF LG condition RG LF stat RF ELSE LF . stat RF

    IF      shift, and go to state 1
    ID      shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FOR     shift, and go to state 4
    WHILE   shift, and go to state 5
    PRINT   shift, and go to state 6
    LG      shift, and go to state 7
    LR      shift, and go to state 8
    ADD     shift, and go to state 9
    SUB     shift, and go to state 10

    expr           go to state 13
    stat           go to state 130
    for_stat       go to state 15
    while_stat     go to state 16
    print_stat     go to state 17
    condition      go to state 18
    bool_cond      go to state 19
    num_cond       go to state 20
    cont           go to state 21
    array          go to state 22
    declare        go to state 23
    asig           go to state 24
    call_function  go to state 25
    if_stat        go to state 26


State 128

    5 expr: expr . ADD expr
    6     | expr . SUB expr
    7     | expr . MUL expr
    8     | expr . DIV expr
    9     | expr . POT expr
   52 asig: ID LR DOUBLE RR LR DOUBLE RR ASIG expr .

    ADD  shift, and go to state 51
    SUB  shift, and go to state 52
    MUL  shift, and go to state 53
    DIV  shift, and go to state 54
    POT  shift, and go to state 55

    ADD       [reduce using rule 52 (asig)]
    SUB       [reduce using rule 52 (asig)]
    $default  reduce using rule 52 (asig)


State 129

   24 for_stat: FOR LG asig SEMICOLON condition SEMICOLON cont RG LF . stat RF

    IF      shift, and go to state 1
    ID      shift, and go to state 2
    DOUBLE  shift, and go to state 3
    FOR     shift, and go to state 4
    WHILE   shift, and go to state 5
    PRINT   shift, and go to state 6
    LG      shift, and go to state 7
    LR      shift, and go to state 8
    ADD     shift, and go to state 9
    SUB     shift, and go to state 10

    expr           go to state 13
    stat           go to state 131
    for_stat       go to state 15
    while_stat     go to state 16
    print_stat     go to state 17
    condition      go to state 18
    bool_cond      go to state 19
    num_cond       go to state 20
    cont           go to state 21
    array          go to state 22
    declare        go to state 23
    asig           go to state 24
    call_function  go to state 25
    if_stat        go to state 26


State 130

   57 if_stat: IF LG condition RG LF stat RF ELSE LF stat . RF

    RF  shift, and go to state 132


State 131

   24 for_stat: FOR LG asig SEMICOLON condition SEMICOLON cont RG LF stat . RF

    RF  shift, and go to state 133


State 132

   57 if_stat: IF LG condition RG LF stat RF ELSE LF stat RF .

    $default  reduce using rule 57 (if_stat)


State 133

   24 for_stat: FOR LG asig SEMICOLON condition SEMICOLON cont RG LF stat RF .

    $default  reduce using rule 24 (for_stat)
